from collections import deque
graph =[]
for info in input().split("\n") :
   graph.append(list(info))

# color : 색깔
# temp : 제거 대상을 일단 추가
# count : 인접 + 같은 색 갯수
def bfs(x,y,graph):
    if graph[x][y] == ".":
        return
    temp =[[x,y]]
    color = graph[x][y]
    count = 1
    q= deque()
    x,y = 11,0
    q.append([x,y])
    while q :
        x,y = q.popleft()
        dx = [0, 0, 1, -1]
        dy = [1, -1, 0, 0]
        i = 0
        for i in range(4):
            nx = x + dx[i] ; ny = y + dy[i]
            if nx < 0 or nx >=12 or ny <0 or ny >= 6 : continue
            if graph[nx][ny] == color and [nx,ny] not in temp : #색도 같고 이미 탐색된적 없다면
                q.append([nx,ny])
                temp.append([nx,ny])
                count += 1
    if count >= 4 :
        for x,y in temp :
            graph[x][y] = "." #없애기
        return 1
    return 0

#채워넣기
def gravity(graph) :
    for j in range(6) :
        q = deque()
        for i in range(11,-1,-1):
            if graph[i][j] != "." :
                q.append(graph[i][j])
        for i in range(11,-1,-1):
            if q == deque() : break
            graph[i][j] = q.popleft()

count = 0
while True :
    answer = 0
    for i in range(11,-1,-1):
        for j in range(6):
            if graph[i][j] != ".":
                answer += bfs(i,j,graph)

    if answer != 0 :
        count +=1
        gravity(graph)

    else : break

## 쟁점
빈칸을 어떻게 채울 것인가
## 배운점
빈칸 채울 때 인덱스 고려하지말고 큐로 수거하고 뿌리는게 편함
